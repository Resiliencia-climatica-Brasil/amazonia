/**
 * This script generates and exports rasters with the z score for each image generated in steps 1:4 in Gee
 * 
 * 

- Steps to calculate Z-scores

1- Calculate the mean and standard deviation for the extention of the images 

2- Subtract the mean from value for each pixel and divide by the sd

3- Export

*/

var Biome = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                        .map(function(feature){
                             return feature.bounds()
                             })
                        .geometry()
                        .dissolve({'maxError': 1})
                        .bounds();

var brasil_raster = ee.Image("projects/ee-lucasljardim9/assets/brasil_raster");


//NOVAS JANELAS ATUALIZADAS

var img_elevation = ee.Image('projects/ee-lucasljardim9/assets/elevation_range_residual')
                    .updateMask(brasil_raster);

var img_landform = ee.Image('projects/ee-lucasljardim9/assets/landform_variety')
                   .updateMask(brasil_raster);

var img_wetlands_density = ee.Image('projects/ee-resilience/assets/New_window_size/wetlands_density')
                           .updateMask(brasil_raster);

var img_wetlands_density1000 = ee.Image('projects/ee-resilience/assets/New_window_size/wetlands_density_1000')
                               .updateMask(brasil_raster);

var img_wetlands_count = ee.Image('projects/ee-resilience/assets/New_window_size/wetlands_count')
                         .updateMask(brasil_raster);

var img_soil_diversity = ee.Image('projects/ee-resilience/assets/New_window_size/soil_diversity')
                         .updateMask(brasil_raster);

var scale = img_elevation.projection().nominalScale();

// Coding the function to apply the formula of Z-Scores for any raster image that we need

var calculate_Z_scores = function(image, windows) {
  
  // Calculating the mean
  var mean = image.reduceNeighborhood({
    reducer: ee.Reducer.mean(),
    kernel: ee.Kernel.circle(windows),
  })

  // Calculating the standard deviation
  var sd = image.reduceNeighborhood({
    reducer: ee.Reducer.stdDev(),
    kernel: ee.Kernel.circle(windows),
  });

  // Values as a raster
  var meanValue = mean.rename('mean');
  var sdValue = sd.rename('sd');

  // Calculating the z scores
  var z = image.subtract(meanValue).divide(sdValue).rename('z');

  return z;
};

//Defing the window of the moving window

var windows = 23; // test with 15 than change it to 23 to see the diference.

// Landforms, Elevation Range and Soil Diversity Z scores --------------------------

var Z_elevation = calculate_Z_scores(img_elevation, windows);

var Z_landform = calculate_Z_scores(img_landform, windows);

var Z_soil_diversity = calculate_Z_scores(img_soil_diversity, windows);

// Wetlands Diversity -------------------------------------------------------------

// For wetlands we first need to calculate the Z Score for wetlands density in 100 acres

var Z_wetlands_density = calculate_Z_scores (img_wetlands_density, windows);

// Z score for wetlands density in 1000 acres

var Z_wetlands_density1000 = calculate_Z_scores (img_wetlands_density1000, windows);

// Z Score for the wetlands patchness
var Z_wetlands_count  = calculate_Z_scores (img_wetlands_count, windows);

// Now we can calculate the wetland density as the average of the density for 100 and 1000 acres

var wetlands_density = Z_wetlands_density
                        .multiply(2)
                        .add(Z_wetlands_density1000)
                        .divide(3);

//The final Wetland Z score is the average of wetland density and wetland patchness, but ONLY when patchness is higher than density

var wet_test = wetlands_density.lte(Z_wetlands_count);

var wet_average = wetlands_density
                  .multiply(3)
                  .add(Z_wetlands_count)
                  .divide(4);

var Z_wetlands_score = Z_wetlands_density.where(wet_test, wet_average);

var paleta = ['011301','011D01','012E01','023B01','004C00','056201','207401','3E8601','529400','66A000','74A901','99B718','FCD163','F1B555','DF923D','CE7E45','FFFFFF'];

Map.addLayer(Z_elevation, {palette:paleta}, 'Z_elevation')
Map.addLayer(Z_landform, {palette:paleta}, 'Z_landform')
Map.addLayer(Z_soil_diversity, {palette:paleta}, 'Z_soil_diversity')
Map.addLayer(Z_wetlands_score, {palette:paleta}, 'Z_wetlands_score')



// Exporting Z Scores
/*

Export.image.toAsset({image: Z_elevation, 
                      description: "Z_elevation", 
                      assetId: "Z-Scores_elevation_range", 
                      pyramidingPolicy:"median",
                      region:Biome,
                      scale: scale,
                      maxPixels: 1e13});


Export.image.toAsset({image: Z_landform, 
                    description: "Z_landform", 
                     assetId: "Z-Scores_landforms", 
                     pyramidingPolicy:"median",
                     region:Biome,
                     scale: scale,
                     maxPixels: 1e13});


Export.image.toAsset({image: Z_soil_diversity, 
                      description: "Z_soil_diversity", 
                      assetId: "Z-Scores_soil_diversity", 
                      pyramidingPolicy:"median",
                      region:Biome,
                      scale: scale,
                      maxPixels: 1e13});


Export.image.toAsset({image: Z_wetlands_score, 
                      description: "Z_wetlands_score", 
                      assetId: "Z-Scores_wetlands", 
                      pyramidingPolicy:"median",
                      region:Biome,
                      scale: scale,
                      maxPixels: 1e13});


*/