// Importing data ----------------------------------------------------------


var bioma = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                       .map(function(feature){
                             return feature.bounds()
                             })
                        .geometry()
                        .dissolve({'maxError': 1})
                        .bounds();


var landform_Z = ee.Image('projects/ee-resilience/assets/Z-Scores/Z-Scores_elevation_range_residual');

var elevation_range_Z = ee.Image('projects/ee-resilience/assets/Z-Scores/Z-Scores_landform_variety');

var wetland_score = ee.Image('projects/ee-resilience/assets/Z-Scores/Z-Scores_wetlands_count');

var soil_diversity =  ee.Image('projects/ee-resilience/assets/Z-Scores/Z-Scores_wetlands_density');


// Step 1 ------------------------------------------------------------------
// Take the average of landform and elevation range only if elevantion range is higher than landform--------

// Test if elevation range is greater than landscape diversity

var test_1 = elevation_range_Z.gt(landform_Z);print(test_1)
Map.addLayer(test_1, {min:0, max:1, palette:['red', 'blue']}, 'Pixels where elevation is GREATER THAN landforms')

// Compute the average elevation
var average_elevation = landform_Z.multiply(2).add(elevation_range_Z).divide(3);

// Update landscape diversity where test_1 is true
var landscape_diversity = landscape_diversity.where(test_1, average_elevation);

// Test if wetland score is greater than landscape diversity
var test_2 = wetland_score.gt(landscape_diversity);

// Step 2 ------------------------------------------------------------------
//Take the average of landform, elevation range and wetland score only if wetland score is higher than Step 1

// Compute the average wetland scores
var average_wetland_1 = landform_Z.multiply(2)
  .add(elevation_range_Z)
  .add(wetland_score)
  .divide(4);

var average_wetland_2 = landform_Z.multiply(2)
  .add(wetland_score)
  .divide(3);

// Update landscape diversity based on test_1 and test_2
var landscape_diversity = landscape_diversity.where(test_1.and(test_2), average_wetland_1)
  .where(test_1.not().and(test_2), average_wetland_2);


/*
landscape_diversity <- landform_Z

test_1 <- elevation_range_Z > landscape_diversity 

average_elevation <- ((2 * landform_Z) + elevation_range_Z) / 3

landscape_diversity[test_1] <- average_elevation[test_1]
*/
