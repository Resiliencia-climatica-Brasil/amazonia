//************************************ Landscape Diversity******************************************************

var biome = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                       .select("Bioma")
                       .filter(ee.Filter.eq("Bioma", "Cerrado"))


var brasil_raster = ee.Image("projects/ee-resilience/assets/brasil_raster");

var scale = brasil_raster.projection().nominalScale();

var UC_FedEstMun = ee.FeatureCollection("projects/ee-resilience/assets/UC_FedEstMun");

var UC_Ti = ee.FeatureCollection("projects/ee-resilience/assets/UC_Ti"); 


/* // Vai perguntar o tamanho de janela que você vai usar. se já tivermos decidido usar a formula de baixo
var windows = prompt('Enter the window size based on the Z image name:', '50');
windows = parseInt(windows);
if (isNaN(windows) || windows <= 0) {
   print('Invalid input. Using default value for the window size.');
  windows = 50;}
print(windows);
*/
var windows = 200;

var Z_landform  = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_landforms_movingwindow_'+windows.toString())
                   .updateMask(brasil_raster);

var Z_elevation = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_elevation_range_movingwindow_'+windows.toString())
                    .updateMask(brasil_raster);

var Z_wetlands_score = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_wetlands_movingwindow_'+windows.toString())
                   .updateMask(brasil_raster);

var Z_soil_diversity = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_soil_diversity_movingwindow_'+windows.toString())
                         .updateMask(brasil_raster);


// Step 1 ------------------------------------------------------------------
// Take the average of landform and elevation range only if elevantion range is higher than landform--------

// Test if elevation range is greater than landscape diversity

var landscape_diversity = Z_landform;

var test_1 = Z_elevation.gt(landscape_diversity);


// Compute the average elevation
var average_elevation = Z_landform.multiply(2).add(Z_elevation).divide(3);

// Update landscape diversity where test_1 is true

var landscape_diversity = landscape_diversity.where(test_1, average_elevation);


// Step 2 ------------------------------------------------------------------
// Take the average of landform, elevation range, and wetland score only if wetland score is higher than Step 1

var test_2 = Z_wetlands_score.gt(landscape_diversity);


// Calculate average -------------------------------------------------------
// Elevation range higher than landform ------------------------------------

var average_wetland_1 = Z_landform.add(Z_elevation).add(Z_wetlands_score.multiply(2)).divide(4);

var average_wetland_2 = Z_landform.add(Z_wetlands_score.multiply(2)).divide(3);


// Assigning new landform diversity values ---------------------------------



//IF values of landscape_diversity are < elevation Z Score AND Wetland Z score we will calculate the diversity as landforms*2 + elevation + wetland / 4  

var landscape_diversity = landscape_diversity.where(test_1.and(test_2), average_wetland_1); 

//var landscape_diversity = landscape_diversity.where(test_2, wetland_score); // I don´t know why we were not calculting the mean, but if we need to go back we just remove the averages on lines 79 and 81 an run this code 


//IF the values of diversity are < elevation but > wetland; then the diversity will be calculated by landforms*2 + wetlands / 3 

var landscape_diversity = landscape_diversity.where(test_1.not().and(test_2), average_wetland_2); 


// Step 3 ------------------------------------------------------------------
// Take the average of soil diversity only if it is higher than Step 2

var test_3 = Z_soil_diversity.gt(landscape_diversity);


// Averages ----------------------------------------------------------------

var average_soil_1 = Z_landform.add(Z_elevation).add(Z_wetlands_score.multiply(2)).add(Z_soil_diversity).divide(5);

var average_soil_2 = Z_landform.multiply(2).add(Z_elevation).add(Z_soil_diversity).divide(4);

var average_soil_3 = Z_landform.add(Z_wetlands_score.multiply(2)).add(Z_soil_diversity).divide(4);

var average_soil_4 = Z_landform.multiply(2).add(Z_soil_diversity).divide(3);


// Assigning new landscape diversity values  -------------------------------

//1) IF values of Diversity are SMALLER than elevation AND Wetlands AND Soil Diversity:
// Landscape diversity = landforms*2 + elevation + wetland + soil /5

//2) IF diversity is SMALER then elevation AND Soil but BIGGER then Wetlands:
// Landscape diversity = landforms*2 + elevation + soil /4

//3) IF diversity is SMALLER than Wetlands AND soil but bigger than Elevation:
// Landscape diversity = landforms*2 + wetland + soil /4

//4) IF diversity is SMALLER than soil but bigger than Elevation AND Wetlands:
// Landscape diversity = landforms*2 + soil /3


var landscape_diversity = landscape_diversity.where(test_1.and(test_2).and(test_3), average_soil_1); // 1)

var landscape_diversity = landscape_diversity.where(test_1.and(test_2.not()).and(test_3), average_soil_2); // 2)

var landscape_diversity = landscape_diversity.where(test_1.not().and(test_2).and(test_3), average_soil_3); // 3)

var landscape_diversity = landscape_diversity.where(test_1.not().and(test_2.not()).and(test_3), average_soil_4); // 4)

var diversity = landscape_diversity;



// ------------------------------------- PLOTING MAPS -----------------------------

var connectedness = ee.Image("projects/ee-lucasljardim9/assets/Biomas_resistencia_kernel")
                          .multiply(-1); 
                          
var omniscape = ee.Image("projects/ee-lucasljardim9/assets/Cerrado_cum_currmap"); 

// The classes are calculated as the sum of the classified values of the original rasters 
/*

|Group      | Diversity   |Connectedness   | Values in Gee |

|Group 1    |    <25%     |     <25%       |       12      |
|Group 2    |    <25%     |     25-50%     |       22      |
|Group 3    |    <25%     |     50-75%     |       32      |
|Group 4    |    <25%     |     >75%       |       42      |
|Group 5    |    25-50%   |     <25%       |       13      |
|Group 6    |    25-50%   |     25-50%     |       23      |
|Group 7    |    25-50%   |     50-75%     |       33      |
|Group 8    |    25-50%   |     >75%       |       43      |
|Group 9    |    50-75%   |     <25%       |       14      |
|Group 10   |    50-75%   |     25-50%     |       24      |
|Group 11   |    50-75%   |     50-75%     |       34      |
|Group 12   |    50-75%   |     >75%       |       44      |
|Group 13   |    >75%     |     <25%       |       15      |
|Group 14   |    >75%     |     25-50%     |       25      |
|Group 15   |    >75%     |     50-75%     |       35      |
|Group 16   |    >75%     |     >75%       |       45      |

*/

// Compute the quantiles for each raster, the value of the quantiles will be stored as a band

var quartiles_Div = diversity.reduceRegion({
    reducer: ee.Reducer.percentile([0,25, 50, 75,100]), 
    scale: diversity.projection().nominalScale(),
    maxPixels:1e13,
    bestEffort: false
  }); 

var quartiles_Con = connectedness.reduceRegion({
    reducer: ee.Reducer.percentile([0,25, 50, 75,100]), 
    scale: connectedness.projection().nominalScale(),
    maxPixels:1e13,
    bestEffort: false
  });

var quartiles_Omn = omniscape.reduceRegion({
    reducer: ee.Reducer.percentile([0,25, 50, 75,100]), 
    scale: omniscape.projection().nominalScale(),
    maxPixels:1e13,
    bestEffort: false
  });
  
//creating the classes for Diversity based on the valeus.
var div_25 = quartiles_Div.getNumber('z_p25');
var div_50 = quartiles_Div.getNumber('z_p50');
var div_75 = quartiles_Div.getNumber('z_p75');

var class_div = diversity 
.where(diversity.lt(div_25), 2)  
.where(diversity.gte(div_25).and(diversity.lt(div_50)), 3)
.where(diversity.gte(div_50).and(diversity.lt(div_75)), 4)
.where(diversity.gte(div_75).and(diversity), 5);

//creating the classes for Connectedness
var con_25 = quartiles_Con.getNumber('b1_p25');
var con_50 = quartiles_Con.getNumber('b1_p50');
var con_75 = quartiles_Con.getNumber('b1_p75');

var class_con = connectedness
.where(connectedness.lt(con_25),10)
.where(connectedness.gte(con_25).and(connectedness.lt(con_50)), 20)
.where(connectedness.gte(con_50).and(connectedness.lt(con_75)),30)
.where(connectedness.gte(con_75).and(connectedness), 40);

//creating the classes for Connectedness by omniscape
var omn_25 = quartiles_Omn.getNumber('b1_p25');
var omn_50 = quartiles_Omn.getNumber('b1_p50');
var omn_75 = quartiles_Omn.getNumber('b1_p75');

var class_omn = omniscape
.where(omniscape.lt(omn_25),10)
.where(omniscape.gte(omn_25).and(omniscape.lt(omn_50)), 20)
.where(omniscape.gte(omn_50).and(omniscape.lt(omn_75)),30)
.where(omniscape.gte(omn_75).and(omniscape), 40);



//// Sum the classified rasters to create the landscape_resilience image

var resilience = class_div.add(class_con);

var resilience_omn = class_div.clip(biome).add(class_omn)
/*
var resilience_classes = resilience
                          .where(resilience.eq(12), 1) 
                          .where(resilience.eq(13), 1) 
                          .where(resilience.eq(22), 1)
                          
                          .where(resilience.eq(14), 2)                         
                          .where(resilience.eq(15), 2) 
                          .where(resilience.eq(32), 2) 
                          .where(resilience.eq(42), 2)
                           
                          .where(resilience.eq(25), 3) 
                          .where(resilience.eq(43), 3)
                          
                          .where(resilience.eq(23), 4)                         
                          .where(resilience.eq(24), 4) 
                          .where(resilience.eq(33), 4) 
                          .where(resilience.eq(34), 4)
                          
                          .where(resilience.eq(35), 5) 
                          .where(resilience.eq(45), 5) 
                          .where(resilience.eq(44), 5);
*/

var resilience_classes = resilience
                          .where(resilience.eq(12), 1) 
                          .where(resilience.eq(13), 2) 
                          .where(resilience.eq(22), 3)
                          .where(resilience.eq(14), 4)
                          .where(resilience.eq(32), 5)
                          .where(resilience.eq(23), 6)                           
                          .where(resilience.eq(15), 7) 
                          .where(resilience.eq(42), 8)
                          .where(resilience.eq(24), 9) 
                          .where(resilience.eq(33), 10)                           
                          .where(resilience.eq(25), 11) 
                          .where(resilience.eq(43), 12)
                          .where(resilience.eq(34), 13)
                          .where(resilience.eq(35), 14) 
                          .where(resilience.eq(44), 15) 
                          .where(resilience.eq(45), 16);

var resilience_omn_classes = resilience_omn
                          .where(resilience_omn.eq(12), 1) 
                          .where(resilience_omn.eq(13), 2) 
                          .where(resilience_omn.eq(22), 3)
                          .where(resilience_omn.eq(14), 4)
                          .where(resilience_omn.eq(32), 5)
                          .where(resilience_omn.eq(23), 6)                           
                          .where(resilience_omn.eq(15), 7) 
                          .where(resilience_omn.eq(42), 8)
                          .where(resilience_omn.eq(24), 9) 
                          .where(resilience_omn.eq(33), 10)                           
                          .where(resilience_omn.eq(25), 11) 
                          .where(resilience_omn.eq(43), 12)
                          .where(resilience_omn.eq(34), 13)
                          .where(resilience_omn.eq(35), 14) 
                          .where(resilience_omn.eq(44), 15) 
                          .where(resilience_omn.eq(45), 16);

var histogram = ui.Chart.image.histogram(({
  image: class_con,
  scale: scale,
  maxPixels: 1e13}))
  .setOptions({
    title: 'Histogram of Pixel Values ' ,
    hAxis: {title: 'Pixel Value'},
    vAxis: {title: 'Count'},
    legend: 'none'
  }); print('class_con',histogram);

var histogram = ui.Chart.image.histogram(({
  image: class_div,
  scale: scale,
  maxPixels: 1e13}))
  .setOptions({
    title: 'Histogram of Pixel Values ' ,
    hAxis: {title: 'Pixel Value'},
    vAxis: {title: 'Count'},
    legend: 'none'
  }); print('class_div',histogram);

var histogram = ui.Chart.image.histogram(({
  image: resilience_classes,
  scale: scale,
  maxPixels: 1e13}))
  .setOptions({
    title: 'Histogram of Pixel Values ' ,
    hAxis: {title: 'Pixel Value'},
    vAxis: {title: 'Count'},
    legend: 'none'
  }); print('resilience_classes',histogram);



//Visualization

var paleta_div_con = [
'f3dfd1',
'CE7E45',
'99B718',
'056201',
'011301',
];


//viridis color scale
var paleta_res = [
"#E6E6E6",       //12 -> 1
"#F2F2CB",       //13 -> 2
"#F9F9A0",       //22 -> 3
"#FDFD75",       //14 -> 4
"#FDE725",       //32 -> 5
"#D0E119",       //23 -> 6
"#A4D525",       //15 -> 7
"#6DCD59",       //42 -> 8
"#35C389",       //24 -> 9
"#1F9E89",       //33 -> 10
"#26828E",       //25 -> 11
"#31688E",       //43 -> 12
"#3E4989",       //34 -> 13
"#482878",       //35 -> 14
"#4F027B",       //44 -> 15
"#440154",        //45 -> 16
];

/*
var paleta_res = [
"#DF0015",       //12 -> 1
"#A5400F",       //13 -> 2
"#DF7F09",       //22 -> 3
"#4F9F06",       //14 -> 4
"#DFBF03",       //32 -> 5
"#A2200F",       //23 -> 6
"#15DF00",       //15 -> 7
"#DFDF00",       //42 -> 8
"#616A08",       //24 -> 9
"#B16A08",       //33 -> 10
"#12C300",       //25 -> 11
"#C3C300",       //43 -> 12
"#663F09",       //34 -> 13
"#10A700",       //35 -> 14
"#8B8B00",       //44 -> 15
"#0B6F00"         //45 -> 16
];
*/

Map.addLayer(class_div, {min: 2, max:5, palette:paleta_div_con}, 'Landscape Diversity class');
Map.addLayer(class_con, {min: 10, max:40, palette:paleta_div_con}, 'Local Connectedness class');
Map.addLayer(class_omn, {min: 10, max:40, palette:paleta_div_con}, 'Local Connectedness by Omniscape class');
Map.addLayer(resilience_classes,{min: 1, max:16, palette:paleta_res}, 'Landscape Resilience');
Map.addLayer(resilience_omn_classes,{min: 1, max:16, palette:paleta_res}, 'Landscape Resilience with Omniscape');

//Map.addLayer (resilience_classes.clip(UC_Ti),{min:1, max:16, palette:paleta_res}, 'Terras Indígenas');
//Map.addLayer(resilience_classes.clip(UC_FedEstMun), {min:1, max:16, palette:paleta_res}, 'Ucs Federais, Estaduais e Municipais');

Map.centerObject(brasil_raster);

var legend = ui.Panel({
             style: {
               position:'bottom-right',
               padding: '6px 8px'
             }
});


var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};


var res =[
"12 0-25% Diversity, 0-25% Resistance",
"13 25-50% Diversity, 0-25% Resistance",
"22 0-25% Diversity, 25-50% Resistance",
"14 50-75% Diversity, 0-25% Resistance",
"32 0-25% Diversity, 50-75% Resistance",
"23 25-50% Diversity, 25-50% Resistance",
"15 75-100% Diversity, 0-25% Resistance",
"42 0-25% Diversity, 75-100% Resistance",
"24 50-75% Diversity, 25-50% Resistance",
"33 25-50% Diversity, 50-75% Resistance",
"25 75-100% Diversity, 25-50% Resistance",
"43 25-50% Diversity, 75-100% Resistance",
"34 50-75% Diversity, 50-75% Resistance",
"35 75-100% Diversity, 50-75% Resistance",
"44 50-75% Diversity, 75-100% Resistance",
"45 75-100% Diversity, 75-100% Resistance"
];

for (var i = 0; i < 16; i++) {
  legend.add(makeRow(paleta_res[i], res[i]));
  }  
 
Map.add(legend);

