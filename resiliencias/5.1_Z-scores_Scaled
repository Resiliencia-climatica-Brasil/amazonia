var Biome = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                        .map(function(feature){
                             return feature.bounds()
                             })
                        .geometry()
                        .dissolve({'maxError': 1})
                        .bounds();

var brasil_raster = ee.Image("projects/ee-resilience/assets/brasil_raster");

/*
var windows = prompt('Enter the window size based on the Z image name:', '50');
windows = parseInt(windows);
if (isNaN(windows) || windows <= 0) {
   print('Invalid input. Using default value for the window size.');
  windows = 50;}
*/

var windows = 200;

var Z_landform = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_landforms_movingwindow_'+windows.toString())
                   .updateMask(brasil_raster);

var Z_elevation = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_elevation_range_movingwindow_'+windows.toString())
                    .updateMask(brasil_raster);

var Z_wetlands_score = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_wetlands_movingwindow_'+windows.toString())
                   .updateMask(brasil_raster)

var Z_soil_diversity = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_soil_diversity_movingwindow_'+windows.toString())
                         .updateMask(brasil_raster);

var scale = brasil_raster.projection().nominalScale();



var scale_z = function(image, windows) {
  
  // Calculating the min
  var min = image.reduceNeighborhood({
    reducer: ee.Reducer.min(),
    kernel: ee.Kernel.circle({
                                radius:windows,
                                units:'pixels', 
                                normalize:false
                              }),
  });

  // Calculating the max
  var max = image.reduceNeighborhood({
    reducer: ee.Reducer.max(),
    kernel: ee.Kernel.circle({
                                radius:windows,
                                units:'pixels', 
                                normalize:false
                              }),
  });

  // Values as a raster
  var minValue = min.rename('min');
  var maxValue = max.rename('max');
  var maxScale = image.multiply(0).add(1); //defining the max value of your scale (1)
  var minScale = image.multiply(0); //0

  // Scalling the z scores
  var scaled = image
                    .subtract(minValue)
                    .multiply(maxScale.subtract(minScale))
                    .divide((maxValue.subtract(minValue)).add(minScale)  )

  return scaled;
};



/*
var Z_elevation_scaled = scale_z(Z_elevation, windows);

var Z_landform_scaled = scale_z(Z_landform, windows);

var Z_soil_diversity_scaled = scale_z(Z_soil_diversity, windows);
*/
var Z_wetlands_score_scaled = scale_z(Z_wetlands_score, windows);

/*
Map.addLayer(Z_wetlands_score_scaled.updateMask(Z_wetlands_score_scaled.lt(0.4).and(Z_wetlands_score_scaled.lt(0.40))), {palette:'blue'}, '<0.40');
Map.addLayer(Z_wetlands_score_scaled.updateMask(Z_wetlands_score_scaled.gt(0.50)), {palette:'red'}, '>0.5');
Map.addLayer(Z_wetlands_score_scaled.updateMask(Z_wetlands_score_scaled.gte(0.40).and(Z_wetlands_score_scaled.lte(0.5) )  ), {palette:'lightgreen'}, '0.40 - 0.5');
*/

/*
var histogram = ui.Chart.image.histogram(({
image: Z_elevation_scaled,
scale: scale,
maxPixels: 1e13}))
.setOptions({
 title: 'Histogram of Pixel Values Original' ,
 hAxis: {title: 'Pixel Value'},
 vAxis: {title: 'Count'},
 legend: 'none'
}); print('Z_elevation_scaled ',histogram);
	
var histogram = ui.Chart.image.histogram(({
image: Z_landform_scaled,
scale: scale,
maxPixels: 1e13}))
.setOptions({
  title: 'Histogram of Pixel Values Original' ,
  hAxis: {title: 'Pixel Value'},
  vAxis: {title: 'Count'},
  legend: 'none'
}); print('Z_landform_scaled',histogram);
	
var histogram = ui.Chart.image.histogram(({
image: Z_soil_diversity_scaled,
scale: scale,
maxPixels: 1e13}))
.setOptions({
  title: 'Histogram of Pixel Values Original' ,
  hAxis: {title: 'Pixel Value'},
  vAxis: {title: 'Count'},
  legend: 'none'
}); print('Z_soil_diversity_scaled',histogram);


var histogram = ui.Chart.image.histogram(({
image: Z_wetlands_score_scaled,
scale: scale,
maxPixels: 1e13}))
.setOptions({
  title: 'Histogram of Pixel Values Original' ,
  hAxis: {title: 'Pixel Value'},
  vAxis: {title: 'Count'},
  legend: 'none'
}); print('Z_wetlands_score_scaled',histogram);
*/
var palettes=require('users/gena/packages:palettes');// https://github.com/gee-community/ee-palettes


var palette = palettes.colorbrewer.Spectral[7].reverse();

Map.addLayer(Z_wetlands_score_scaled, {/*min:0, max:1 ,*/ palette:palette}, 'Wetlands');

/*
Export.image.toAsset({image: Z_elevation_scaled, 
                      description: "Z_elevation_SCALED_"+ windows.toString(), 
                      assetId: "Moving_window_TEMP/Z-Scores_elevation_range_movingwindow_SCALEDJanela_" + windows.toString(), 
                      pyramidingPolicy:"median",
                      region:Biome,
                      scale: scale,
                      maxPixels: 1e13});


Export.image.toAsset({image: Z_landform_scaled, 
                    description: "Z_landform_SCALED_"+ windows.toString(), 
                     assetId: "Moving_window_TEMP/Z-Scores_landforms_movingwindow_SCALEDJanela_"+ windows.toString(), 
                     pyramidingPolicy:"median",
                     region:Biome,
                     scale: scale,
                     maxPixels: 1e13});


Export.image.toAsset({image: Z_soil_diversity_scaled, 
                      description: "Z_soil_diversity_SCALED_"+ windows.toString(), 
                      assetId: "Moving_window_TEMP/Z-Scores_soil_diversity_movingwindow_SCALEDJanela_"+ windows.toString(), 
                      pyramidingPolicy:"median",
                      region:Biome,
                      scale: scale,
                      maxPixels: 1e13});


Export.image.toAsset({image: Z_wetlands_score_scaled, 
                      description: "Z_wetlands_score_SCALED_"+ windows.toString(), 
                      assetId: "Moving_window_TEMP/Z-Scores_wetlands_movingwindow_SCALEDJanela_"+ windows.toString(), 
                      pyramidingPolicy:"median",
                      region:Biome,
                      scale: scale,
                      maxPixels: 1e13});

*/