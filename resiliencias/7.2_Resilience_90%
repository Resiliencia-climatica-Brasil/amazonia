//************************************ Landscape Diversity******************************************************


var brasil_raster = ee.Image("projects/ee-resilience/assets/brasil_raster");

var scale = brasil_raster.projection().nominalScale();

var UC_FedEstMun = ee.FeatureCollection("projects/ee-resilience/assets/UC_FedEstMun");

var UC_Ti = ee.FeatureCollection("projects/ee-resilience/assets/UC_Ti"); 

var windows = 200


var Z_landform  = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_landforms_movingwindow_SCALED_'+windows.toString())
                   .updateMask(brasil_raster);

var Z_elevation = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_elevation_range_movingwindow_SCALED_'+windows.toString())
                    .updateMask(brasil_raster);

var Z_wetlands_score = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_wetlands_movingwindow_SCALED_'+windows.toString())
                   .updateMask(brasil_raster);

var Z_soil_diversity = ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/Z-Scores_soil_diversity_movingwindow_SCALED_'+windows.toString())
                         .updateMask(brasil_raster);


// Step 1 ------------------------------------------------------------------
// Take the average of landform and elevation range only if elevantion range is higher than landform--------

// Test if elevation range is greater than landscape diversity

var landscape_diversity = Z_landform;

var test_1 = Z_elevation.gt(landscape_diversity);


// Compute the average elevation
var average_elevation = Z_landform.multiply(2).add(Z_elevation).divide(3);

// Update landscape diversity where test_1 is true

var landscape_diversity = landscape_diversity.where(test_1, average_elevation);


// Step 2 ------------------------------------------------------------------
// Take the average of landform, elevation range, and wetland score only if wetland score is higher than Step 1

var test_2 = Z_wetlands_score.gt(landscape_diversity);


// Calculate average -------------------------------------------------------
// Elevation range higher than landform ------------------------------------

var average_wetland_1 = Z_landform.add(Z_elevation).add(Z_wetlands_score.multiply(2)).divide(4);

var average_wetland_2 = Z_landform.add(Z_wetlands_score.multiply(2)).divide(3);


// Assigning new landform diversity values ---------------------------------



//IF values of landscape_diversity are < elevation Z Score AND Wetland Z score we will calculate the diversity as landforms*2 + elevation + wetland / 4  

var landscape_diversity = landscape_diversity.where(test_1.and(test_2), average_wetland_1); 

//var landscape_diversity = landscape_diversity.where(test_2, wetland_score); // I don´t know why we were not calculting the mean, but if we need to go back we just remove the averages on lines 79 and 81 an run this code 


//IF the values of diversity are < elevation but > wetland; then the diversity will be calculated by landforms*2 + wetlands / 3 

var landscape_diversity = landscape_diversity.where(test_1.not().and(test_2), average_wetland_2); 


// Step 3 ------------------------------------------------------------------
// Take the average of soil diversity only if it is higher than Step 2

var test_3 = Z_soil_diversity.gt(landscape_diversity);


// Averages ----------------------------------------------------------------

var average_soil_1 = Z_landform.add(Z_elevation).add(Z_wetlands_score.multiply(2)).add(Z_soil_diversity).divide(5);

var average_soil_2 = Z_landform.multiply(2).add(Z_elevation).add(Z_soil_diversity).divide(4);

var average_soil_3 = Z_landform.add(Z_wetlands_score.multiply(2)).add(Z_soil_diversity).divide(4);

var average_soil_4 = Z_landform.multiply(2).add(Z_soil_diversity).divide(3);


// Assigning new landscape diversity values  -------------------------------

//1) IF values of Diversity are SMALLER than elevation AND Wetlands AND Soil Diversity:
// Landscape diversity = landforms*2 + elevation + wetland + soil /5

//2) IF diversity is SMALER then elevation AND Soil but BIGGER then Wetlands:
// Landscape diversity = landforms*2 + elevation + soil /4

//3) IF diversity is SMALLER than Wetlands AND soil but bigger than Elevation:
// Landscape diversity = landforms*2 + wetland + soil /4

//4) IF diversity is SMALLER than soil but bigger than Elevation AND Wetlands:
// Landscape diversity = landforms*2 + soil /3


var landscape_diversity = landscape_diversity.where(test_1.and(test_2).and(test_3), average_soil_1); // 1)

var landscape_diversity = landscape_diversity.where(test_1.and(test_2.not()).and(test_3), average_soil_2); // 2)

var landscape_diversity = landscape_diversity.where(test_1.not().and(test_2).and(test_3), average_soil_3); // 3)

var landscape_diversity = landscape_diversity.where(test_1.not().and(test_2.not()).and(test_3), average_soil_4); // 4)

var diversity = landscape_diversity;
// ------------------------------------- PLOTING MAPS -----------------------------





//var connectedness =ee.Image('projects/ee-resilience/assets/Moving_window_TEMP/') //precisamos mudar para o raster atualizado
var connectedness = ee.Image("projects/ee-lucasljardim9/assets/Biomas_resistencia_kernel")
                          .multiply(-1);


// The classes are calculated as the sum of the classified values of the original rasters 
/*

|Group      | Diversity   |Connectedness   | Values in Gee |

|Group 1    |    <25%     |     <25%       |       12      |
|Group 2    |    <25%     |     25-50%     |       22      |
|Group 3    |    <25%     |     50-75%     |       32      |
|Group 4    |    <25%     |     >75%       |       42      |
|Group 5    |    25-50%   |     <25%       |       13      |
|Group 6    |    25-50%   |     25-50%     |       23      |
|Group 7    |    25-50%   |     50-75%     |       33      |
|Group 8    |    25-50%   |     >75%       |       43      |
|Group 9    |    50-75%   |     <25%       |       14      |
|Group 10   |    50-75%   |     25-50%     |       24      |
|Group 11   |    50-75%   |     50-75%     |       34      |
|Group 12   |    50-75%   |     >75%       |       44      |
|Group 13   |    >75%     |     <25%       |       15      |
|Group 14   |    >75%     |     25-50%     |       25      |
|Group 15   |    >75%     |     50-75%     |       35      |
|Group 16   |    >75%     |     >75%       |       45      |

*/



// Compute the quantiles for each raster, the value of the quantiles will be stored as a band

var quartiles_Div = diversity.reduceRegion({
    reducer: ee.Reducer.percentile([0,25, 50, 75,90,100]), 
    scale: diversity.projection().nominalScale(),
    maxPixels:1e13,
    bestEffort: false
  }); 

var quartiles_Con = connectedness.reduceRegion({
    reducer: ee.Reducer.percentile([0,25, 50, 75,90,100]), 
    scale: connectedness.projection().nominalScale(),
    maxPixels:1e13,
    bestEffort: false
  });

//creating the classes for Diversity based on the valeus.
var div_25 = quartiles_Div.getNumber('z_p25');
var div_50 = quartiles_Div.getNumber('z_p50');
var div_75 = quartiles_Div.getNumber('z_p75');
var div_90 = quartiles_Div.getNumber('z_p90');

var class_div = diversity 
.where(diversity.lt(div_25), 2)  
.where(diversity.gte(div_25).and(diversity.lt(div_50)), 3)
.where(diversity.gte(div_50).and(diversity.lt(div_75)), 4)
.where(diversity.gte(div_75).and(diversity.lt(div_90)), 5)
.where(diversity.gte(div_90), 6);

//creating the classes for Connectedness
var con_25 = quartiles_Con.getNumber('b1_p25');
var con_50 = quartiles_Con.getNumber('b1_p50');
var con_75 = quartiles_Con.getNumber('b1_p75');
var con_90 = quartiles_Con.getNumber('b1_p90');

var class_con = connectedness
.where(connectedness.lt(con_25),10)
.where(connectedness.gte(con_25).and(connectedness.lt(con_50)), 20)
.where(connectedness.gte(con_50).and(connectedness.lt(con_75)),30)
.where(connectedness.gte(con_75).and(connectedness.lt(con_90)), 40)
.where(connectedness.gte(con_90), 50);

//// Sum the classified rasters to create the landscape_resilience image

var resilience = class_div.add(class_con);

Map.addLayer(resilience.eq(46).selfMask(), {min:0, max:1, palette:'blue'}, '> 90% Div 75-90% Con');
Map.addLayer(resilience.eq(55).selfMask(), {min:0, max:1, palette:'green'}, '75-90% > 90% Con');
Map.addLayer(resilience.eq(56).selfMask(), {min:0, max:1, palette:'red'}, '> 90% Div E Con');


var legend = ui.Panel({
             style: {
               position:'bottom-right',
               padding: '6px 8px'
             }
});

var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

var paleta = [
  'blue',
  'green',
  'red'
  ]

var res =[
'> 90% Div 75-90% Con',
'75-90% > 90% Con',
'> 90% Div E Con',
];

for (var i = 0; i < 3; i++) {
  legend.add(makeRow(paleta[i], res[i]));
  }  
 
Map.add(legend);

