var calculate_variety = function(i){
  var variable_variety = variable
                       .reduceNeighborhood({reducer: ee.Reducer.stdDev(), //.count or .stdDev
                                            kernel: ee.Kernel.circle(i)});
  return variable_variety;                                      
  
}
//let's load all variable that we want to calculate the diversity one by one.
// so you will need to remove the '//' simbol for each variable that you want to calculate


//var variable = ee.Image('projects/ee-resilience/assets/soil_diversity');

var variable = ee.Image('projects/ee-resilience/assets/wetlands_density');

//var variable = ee.Image('projects/ee-resilience/assets/');

//var variable = ee.Image('projects/ee-resilience/assets/elevation_range_residual');


var bioma = ee.FeatureCollection("projects/ee-lucasljardim9/assets/Biome")
                        .map(function(feature){
                             return feature.bounds()
                             })
                        .geometry()
                        .dissolve({'maxError': 1})
                        .bounds();
                        
var windows = [2, 5, 7, 10, 15, 20];

var varieties = ee.ImageCollection(windows
                .map(calculate_variety))
                .toBands();


Export.image.toAsset({image: varieties.regexpRename('^(.*)', 'Win_soil_$1'), //Function to change the name of bands by adding 'Win_Size_' prior to it
                      description: "variety_elev_maps_7-11-15", 
                      assetId: "variety_elev_maps_7-11-15", 
                      pyramidingPolicy:"median", 
                      region: bioma, 
                      scale: variable.projection().nominalScale(),
                      maxPixels: 1e13})
/*
var points = varieties
             .sample({region: bioma, 
                     scale: landforms.projection().nominalScale(), 
                     numPixels: 100
                     });
                     
var reducer = ee.Reducer.mean()
              .combine({reducer2: ee.Reducer.stdDev(),
                        sharedInputs: true
                        });

var media = points.reduceColumns({reducer: reducer.repeat(6), 
                                  selectors: ["0_sum_count", 
                                              "1_sum_count",
                                              "2_sum_count",
                                              "3_sum_count",
                                              "4_sum_count",
                                              "5_sum_count"]});
                                  
print(media);
                      
*/              
                                   